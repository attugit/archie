language: cpp

env:
  global:
    - GCC_VERSION="4.9"
    - CLANG_VERSION="3.5"

matrix:
  include:
    - compiler: gcc
      env: STDLIB=libstdc++ TUPLE_IMPL=archie
    - compiler: gcc
      env: STDLIB=libstdc++ TUPLE_IMPL=std
    - compiler: clang
      env: STDLIB=libstdc++ TUPLE_IMPL=archie
    - compiler: clang
      env: STDLIB=libstdc++ TUPLE_IMPL=std
    - compiler: clang
      env: STDLIB=libc++ TUPLE_IMPL=archie
    - compiler: clang
      env: STDLIB=libc++ TUPLE_IMPL=std
  exclude:
    - env: ignore=this
  allow_failures:
    - compiler: clang
      env: STDLIB=libc++ TUPLE_IMPL=archie
    - compiler: clang
      env: STDLIB=libc++ TUPLE_IMPL=std
  fast_finish: true

before_install:
  -
    if [ "$CXX" == "g++" ];
    then
      echo sudo add-apt-repository --yes ppa:ubuntu-toolchain-r/test;
      sudo add-apt-repository --yes ppa:ubuntu-toolchain-r/test;
    fi
  -
    if [ "$CXX" == "clang++" ];
    then
      echo sudo add-apt-repository --yes ppa:h-rayflood/gcc-upper;
      sudo add-apt-repository --yes ppa:h-rayflood/gcc-upper;
      echo sudo add-apt-repository --yes ppa:h-rayflood/llvm-upper;
      sudo add-apt-repository --yes ppa:h-rayflood/llvm-upper;
    fi
  - sudo apt-get update -qq

install:
  -
    if [ "$CXX" = "g++" ];
    then
      echo sudo apt-get install -qq g++-${GCC_VERSION};
      sudo apt-get install -qq g++-${GCC_VERSION};
      echo export CXX="g++-${GCC_VERSION}" CC="gcc-${GCC_VERSION}";
      export CXX="g++-${GCC_VERSION}" CC="gcc-${GCC_VERSION}";
    fi
  -
    if [ "$CXX" == "clang++" ];
    then
      echo sudo apt-get install -qq clang-${CLANG_VERSION};
      sudo apt-get install -qq clang-${CLANG_VERSION};
      echo export CXX="clang++-${CLANG_VERSION}" CC="clang-${CLANG_VERSION}";
      export CXX="clang++-${CLANG_VERSION}" CC="clang-${CLANG_VERSION}";
    fi
  -
    if [ "$STDLIB" == "libstdc++" ];
    then
      echo sudo apt-get install -qq libstdc++6-${GCC_VERSION}-dbg;
      sudo apt-get install -qq libstdc++6-${GCC_VERSION}-dbg;
    fi
  -
    if [ "$STDLIB" == "libc++" ];
    then
      echo sudo apt-get install -qq libc++1 libc++-dev;
      sudo apt-get install -qq libc++1 libc++-dev;
    fi
  - sudo apt-get -qq install valgrind;
  - echo `which scan-build`;

script:
  - ./waf distclean
  - ./waf configure --stdlib=${STDLIB} --tuple=${TUPLE_IMPL};
  - ./waf debug release --alltest --testcmd="valgrind --error-exitcode=1 %s"
